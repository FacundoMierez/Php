Crear proyecto:

Configuraciones:

1)cd xampp/htdcos
2)composer create-project --prefer-dist laravel/proyecto nombreproyecto
3)cambiamos el nombre de la aplicacion: 
	3.1)cd blog
	3.2)php artisan app:name Cotizaciones

4)Configuramos la base de datos en el archivo .env

Modelos:
1)Comando para crear: php artisan make:model User
2)Creamos la tabla correspondiente: php artisan make:migration create_table_productos --create="productos"
3)creamos la tabla perfiles: php artisan make:migration create_table_perfiles --create="perfiles"
4)Agreamos al modelo usuario la clave foranea de perfiles.
5)Mediante el comando creamos la llave foranea: php artisan make:migration create_foreing_perfilUsua
rio
6)realizar las migraciones -> php artisan migrate

Cuando se clona un proyecto de laravel, con el comando composer update, con esto se instalan todos los paquetes que estan definido en composer.json.

Con Tinker podemos hacer pruebas:
1)php artisan tinker
2)Craamos un objeto $user=['name'=>'facundo','email'=>'facundo@gmail.com','password'=>bcrypt('123')]
3)luego para insertar llamamos a la funcion \App\User::create($user);
4)Para traer los registros almacenados -> $users=\App\users:all();

USO DE TINKER:

$category=new App\Category();
$category->name="Noticias";
$category->save();


$user=new App\User();
$user->name="Lionel Messi";
$user->email="lionel@messi.com";
$user->password=bcrypt('argentina');
$user->save();


$article=new App\Article();
$article->title="Noticia de ultima Hora";
$article->content="Contenido de la noticia";
$article->category_id=1;
$article->user_id=1;
$article->save();

$tag=new App\Tag();
$tag->name="Sucesos";
$tag->save();

Para buscar ingresamos el siguiente comando
$article=App\Article::find(1);

Para saber que categorias tiene un articulo solo tengo que llamar a la funcion category de article.
$article->category();

ahora si llamo a $article, contendra los valores de la categoria asociada

de igual manera hacemos: $article->category();

AHORA VAMOS A INSERTAR LOS TAGS

Si verifico $article->tags nos deberia devolver vacio


$article->tags()->attach(1);
Attach lo que va hacer es usar la tabla pibot en la relacion de * a *

como parametro podemos pasar el tags que previamente tuvimos que haber creado o el id del tags.


RUTAS:

Route::get('/articles/{nombre?}', function ($nombre ="No coloco nombre") {
     echo "Esta es la seccion de articulos" . $nombre;
});

BLADE MOTOR DE PLANTILLAS

{{$articles->title}}

@for($i = 0; $i <=5; $i++)
	{{$i}}
@endfor

@if(true)
	<h1>trueeeee</h1>
@endif

@foreach($item as $articles)
	....
@endforeach


Instalamos Eloquent-Sluggable para que en la url te formatee de la sig manera:

supongamos que tenemos localhost/article/view/1

vamos a tener localhost/article/view/titulo-de-la-noticia

php artisan route:list


Paquetes:

Para las notificaciones usamos ->lacracast
como motor de plantilla ->blade

Cuando utilizamos resource, la ruta que nos crea para el metodo delete del tipo POST recibe como parametro un objeto por ejemplo de tipo USERS, por lo que requiere hacer un formulario solo para eliminar, para solucionar ello debemos crear una ruta de tipo get que reciba un ID que corresponda al elemento que se quiere eliminar

Cambia de host: php artisan serve --host=192.168.0.12:8000 y desde el lugar donde querramos ingresar, ingresar el nÂ° de host donde corre la aplicacion

Para las validaciones debemos crear una request y lo hacemos con el siguiente comando:

php artisan make:request CategoryRequest  ->como ejemplo


"php artisan make:controller NOMBREDELCONTROLADOR --model=NOMBREDELMODELO"

Estilos BOOTSTRAP:
en la linea 4514 del archivo bootstrap css encontramos los estilos del hover de los li del menu
Para sacar el padding del navbar hay que modificar en la linea 4166
para cambiar el fondo del navbar-default tenemos que ir a la linea 4499

Tuve que descomentar la linea del constructor del home para que no me obligue a una autenticacion

En la carpeta de Middleware modifique la ruta de redireccionamiento, en donde indica que si esta logueado y quiere
acceder nuevamente a login, esto me redireccione a home


Desde el controlador podemos llamar a \Auth():user->id


SEEDS ->agregan contenido a la BD para hacer pruebas, en este caso creamos un UserSeeder para probar
para ejecutar los SEEDS -> php artisan db:seed

Con el uso del component Factory podemos agregar aleatoriamente varios usuarios 